Ficheiro bin치rio orcs corresponde
orcs_engine.cpp:	this->trace_reader = NULL;
orcs_engine.cpp:	this->processor = NULL;
orcs_engine.cpp:	this->branchPredictor = NULL;
orcs_engine.cpp:	this->cacheManager = NULL;
orcs_engine.cpp:	this->memory_controller = NULL;
orcs_engine.cpp:	gettimeofday(&this->stat_timer_start, NULL);
orcs_engine.cpp:	gettimeofday(&this->stat_timer_end, NULL);
orcs_engine.cpp:	this->trace_reader = new trace_reader_t;
orcs_engine.cpp:	this->processor = new processor_t;
orcs_engine.cpp:	this->branchPredictor = new branch_predictor_t;
orcs_engine.cpp:	this->cacheManager = new cache_manager_t;
orcs_engine.cpp:	this->memory_controller = new memory_controller_t;
orcs_engine.hpp:            return this->global_cycle;
Ficheiro bin치rio orcs_engine.o corresponde
Ficheiro bin치rio simulator.o corresponde
trace_reader.cpp:    this->line_static = NULL;
trace_reader.cpp:    this->line_dynamic = NULL;
trace_reader.cpp:    this->line_memory = NULL;
trace_reader.cpp:    this->gzStaticTraceFile = NULL;
trace_reader.cpp:    this->gzDynamicTraceFile = NULL;
trace_reader.cpp:    this->gzMemoryTraceFile = NULL;
trace_reader.cpp:    this->is_inside_bbl=NULL;
trace_reader.cpp:    this->currect_bbl=0;
trace_reader.cpp:    this->currect_opcode=0;
trace_reader.cpp:    this->binary_total_bbls = 0;     /// Total of BBLs for the static file
trace_reader.cpp:    this->binary_bbl_size = NULL;      /// Total of instructions for each BBL
trace_reader.cpp:    this->binary_dict = NULL; /// Complete dictionary of BBLs and instructions
trace_reader.cpp:    this->fetch_instructions=0;
trace_reader.cpp:    this->trace_opcode_max=0;
trace_reader.cpp:    this->gzStaticTraceFile = gzopen(file_name, "ro");    /// Open the .gz file
trace_reader.cpp:    this->gzDynamicTraceFile = gzopen(file_name, "ro");    /// Open the .gz group
trace_reader.cpp:    ERROR_ASSERT_PRINTF(this->gzDynamicTraceFile != NULL, "Could not open the dynamic file.\n%s\n", file_name);
trace_reader.cpp:    this->gzMemoryTraceFile = gzopen(file_name, "ro");    /// Open the .gz group
trace_reader.cpp:    ERROR_ASSERT_PRINTF(this->gzMemoryTraceFile != NULL, "Could not open the memory file.\n%s\n", file_name);
trace_reader.cpp:    this->is_inside_bbl = false;
trace_reader.cpp:    this->currect_bbl = 0;
trace_reader.cpp:    this->currect_opcode = 0;
trace_reader.cpp:	this->get_total_bbls();
trace_reader.cpp:	this->binary_bbl_size = new uint32_t[this->binary_total_bbls];
trace_reader.cpp:	ERROR_ASSERT_PRINTF(this->binary_bbl_size != NULL, "Could not allocate memory\n");
trace_reader.cpp:	for (uint32_t bbl = 0; bbl < this->binary_total_bbls; bbl++) {
trace_reader.cpp:		this->binary_bbl_size[bbl] = 0;
trace_reader.cpp:	this->define_binary_bbl_size();
trace_reader.cpp:	this->binary_dict = new opcode_package_t*[this->binary_total_bbls];
trace_reader.cpp:	ERROR_ASSERT_PRINTF(this->binary_dict != NULL, "Could not allocate memory\n");
trace_reader.cpp:	for (uint32_t bbl = 1; bbl < this->binary_total_bbls; bbl++) {
trace_reader.cpp:		this->binary_dict[bbl] = new opcode_package_t[this->binary_bbl_size[bbl]];
trace_reader.cpp:		ERROR_ASSERT_PRINTF(this->binary_dict[bbl] != NULL, "Could not allocate memory\n");
trace_reader.cpp:	this->generate_binary_dict();
trace_reader.cpp:    this->line_static = utils_t::template_allocate_array<char>(TRACE_LINE_SIZE);
trace_reader.cpp:    this->line_dynamic = utils_t::template_allocate_matrix<char>(1, TRACE_LINE_SIZE);
trace_reader.cpp:    this->line_memory = utils_t::template_allocate_matrix<char>(1, TRACE_LINE_SIZE);
trace_reader.cpp:    this->trace_opcode_max=0;
trace_reader.cpp:    this->trace_opcode_max=this->get_trace_size();
trace_reader.cpp:    gzclearerr(this->gzDynamicTraceFile);
trace_reader.cpp:    gzseek(this->gzDynamicTraceFile, 0, SEEK_SET);   /// Go to the Begin of the File
trace_reader.cpp:    file_eof = gzeof(this->gzDynamicTraceFile);      /// Check is file not EOF
trace_reader.cpp:        gzgets(this->gzDynamicTraceFile, this->line_dynamic[0], TRACE_LINE_SIZE);
trace_reader.cpp:        file_eof = gzeof(this->gzDynamicTraceFile);
trace_reader.cpp:        if (this->line_dynamic[0][0] != '\0' && this->line_dynamic[0][0] != '#' && this->line_dynamic[0][0] != '$') {
trace_reader.cpp:            BBL = (uint32_t)strtoul(this->line_dynamic[0], NULL, 10);
trace_reader.cpp:            trace_size += this->binary_bbl_size[BBL];
trace_reader.cpp:    gzclearerr(this->gzDynamicTraceFile);            /// Go to the Begin of the File
trace_reader.cpp:    gzseek(this->gzDynamicTraceFile, 0, SEEK_SET);
trace_reader.cpp:    this->binary_total_bbls = 0;
trace_reader.cpp:    gzclearerr(this->gzStaticTraceFile);
trace_reader.cpp:    gzseek(this->gzStaticTraceFile, 0, SEEK_SET);   /// Go to the Begin of the File
trace_reader.cpp:    file_eof = gzeof(this->gzStaticTraceFile);      /// Check is file not EOF
trace_reader.cpp:        gzgets(this->gzStaticTraceFile, file_line, TRACE_LINE_SIZE);
trace_reader.cpp:        file_eof = gzeof(this->gzStaticTraceFile);
trace_reader.cpp:            this->binary_total_bbls++;
trace_reader.cpp:            ERROR_ASSERT_PRINTF(bbl == this->binary_total_bbls, "Expected sequenced bbls.\n")
trace_reader.cpp:    this->binary_total_bbls++;
trace_reader.cpp:    gzclearerr(this->gzStaticTraceFile);
trace_reader.cpp:    gzseek(this->gzStaticTraceFile, 0, SEEK_SET);   /// Go to the Begin of the File
trace_reader.cpp:    file_eof = gzeof(this->gzStaticTraceFile);      /// Check is file not EOF
trace_reader.cpp:        gzgets(this->gzStaticTraceFile, file_line, TRACE_LINE_SIZE);
trace_reader.cpp:        file_eof = gzeof(this->gzStaticTraceFile);
trace_reader.cpp:    gzclearerr(this->gzStaticTraceFile);
trace_reader.cpp:    gzseek(this->gzStaticTraceFile, 0, SEEK_SET);  /// Go to the Begin of the File
trace_reader.cpp:    file_eof = gzeof(this->gzStaticTraceFile);      /// Check is file not EOF
trace_reader.cpp:        gzgets(this->gzStaticTraceFile, file_line, TRACE_LINE_SIZE);
trace_reader.cpp:        file_eof = gzeof(this->gzStaticTraceFile);
trace_reader.cpp:            ERROR_ASSERT_PRINTF(BBL < this->binary_total_bbls, "Static has more BBLs than previous analyzed static file.\n");
trace_reader.cpp:            this->trace_string_to_opcode(file_line, &this->binary_dict[BBL][opcode]);
trace_reader.cpp:            ERROR_ASSERT_PRINTF(this->binary_dict[BBL][opcode].opcode_address != 0, "Static trace file generating opcode address equal to zero.\n")
trace_reader.cpp:        if (gzeof(this->gzDynamicTraceFile)) {
trace_reader.cpp:        char *buffer = gzgets(this->gzDynamicTraceFile, file_line, TRACE_LINE_SIZE);
trace_reader.cpp:        if (gzeof(this->gzMemoryTraceFile)) {
trace_reader.cpp:        char *buffer = gzgets(this->gzMemoryTraceFile, file_line, TRACE_LINE_SIZE);
trace_reader.cpp:    if (!this->is_inside_bbl) {
trace_reader.cpp:        success = this->trace_next_dynamic(&new_BBL);
trace_reader.cpp:            this->currect_bbl = new_BBL;
trace_reader.cpp:            this->currect_opcode = 0;
trace_reader.cpp:            this->is_inside_bbl = true;
trace_reader.cpp:    NewOpcode = this->binary_dict[this->currect_bbl][this->currect_opcode];
trace_reader.cpp:    DEBUG_PRINTF("BBL:%u  OPCODE:%u = %s\n",this->currect_bbl, this->currect_opcode, NewOpcode.opcode_assembly);
trace_reader.cpp:    this->currect_opcode++;
trace_reader.cpp:    if (this->currect_opcode >= this->binary_bbl_size[this->currect_bbl]) {
trace_reader.cpp:        this->is_inside_bbl = false;
trace_reader.cpp:        this->currect_opcode = 0;
trace_reader.cpp:	this->fetch_instructions++;
trace_reader.cpp:        ORCS_PRINTF("fetch_instructions:%lu\n", this->fetch_instructions);
trace_reader.cpp:            fprintf(output,"fetch_instructions: %lu\n", this->fetch_instructions);
Ficheiro bin치rio trace_reader.o corresponde
